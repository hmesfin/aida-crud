name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  backend-lint:
    name: Backend Linting
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install ruff black isort mypy
      
      - name: Run Ruff
        run: |
          cd backend
          ruff check aida_crud/
      
      - name: Run Black
        run: |
          cd backend
          black --check aida_crud/
      
      - name: Run isort
        run: |
          cd backend
          isort --check-only aida_crud/
      
      - name: Run mypy
        run: |
          cd backend
          pip install django djangorestframework django-filter
          mypy aida_crud/ || true

  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        django-version: ['3.2', '4.0', '4.1', '4.2']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install Django~=${{ matrix.django-version }}.0
          pip install -e ".[dev]"
      
      - name: Run tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        run: |
          cd backend
          pytest tests/ -v --cov=aida_crud --cov-report=xml --cov-report=term
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-${{ matrix.python-version }}-django-${{ matrix.django-version }}

  frontend-lint:
    name: Frontend Linting
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/aida-crud/package-lock.json
      
      - name: Install dependencies
        run: |
          cd frontend/aida-crud
          npm ci
      
      - name: Run ESLint
        run: |
          cd frontend/aida-crud
          npm run lint
      
      - name: Run Prettier Check
        run: |
          cd frontend/aida-crud
          npx prettier --check .
      
      - name: Run Type Check
        run: |
          cd frontend/aida-crud
          npm run type-check

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/aida-crud/package-lock.json
      
      - name: Install dependencies
        run: |
          cd frontend/aida-crud
          npm ci
      
      - name: Run tests
        run: |
          cd frontend/aida-crud
          npm run test:coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/aida-crud/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  build:
    name: Build Packages
    needs: [backend-lint, backend-test, frontend-lint, frontend-test]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Build Python Package
        run: |
          cd backend
          pip install --upgrade pip build
          python -m build
      
      - name: Build Frontend Package
        run: |
          cd frontend/aida-crud
          npm ci
          npm run build
      
      - name: Upload Python artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: backend/dist/
      
      - name: Upload Frontend artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-package
          path: frontend/aida-crud/dist/

  publish:
    name: Publish Packages
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Python artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package
          path: backend/dist/
      
      - name: Download Frontend artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-package
          path: frontend/aida-crud/dist/
      
      # Uncomment when ready to publish
      # - name: Publish to PyPI
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   with:
      #     password: ${{ secrets.PYPI_API_TOKEN }}
      #     packages_dir: backend/dist/
      
      # - name: Publish to npm
      #   run: |
      #     cd frontend/aida-crud
      #     echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
      #     npm publish --access public